apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    # Command used to convert Docker Compose to Kubernetes manifest
    kompose.cmd: kompose convert -o k8s/
    kompose.version: 1.26.0 (40646f47)
  # Label for the service provided by the deployment
  labels:
    io.kompose.service: todo-flaskapp
  name: todo-flaskapp
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: todo-flaskapp
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -o k8s/
        kompose.version: 1.26.0 (40646f47)
      labels:
        io.kompose.service: todo-flaskapp
    spec:
      initContainers:
        - name: flaskapp-init
          image: mvertes/alpine-mongo:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: MONGO_HOST
              value: mongo
            - name: MONGO_PORT
              value: "27017"
          command:
            - sh
            - -c
            - until mongo --eval 'db.runCommand("ping").ok' ${MONGO_HOST}:${MONGO_PORT}/test --quiet; do echo -e "waiting for MongoDB"; sleep 5; done; echo -e "MongoDB ready, starting ToDo-FlaskApp now";
      # Container for the Flask app
      containers:
        # Environment variable to set the Flask environment
        - env:
            - name: FLASK_ENV
              value: development
            - name: MONGO_HOST
              value: mongo
            - name: MONGO_PORT
              value: "27017"
            - name: PORT
              value: "5000"
          image: smk8939/app-new:latest
          imagePullPolicy: Always
          name: flask-app
          ports:
            - containerPort: 5000
          # Resource limits for the container
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "0.5"
              memory: "256Mi"
          # Add readiness probe to check if the app is ready to receive traffic
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 5
            periodSeconds: 10
          # Add liveness probe to check if the app is alive
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 3
      restartPolicy: Always
status: {}
